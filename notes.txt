Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:15 AM (15 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (15 mins)
    Wind up     : 5:30 PM

Methodology:
    No powerpoints
    100% hands on

About You:
    Name
    Experience
    Primary Skillset
    Experiments with Design Patterns


Anyone can build an application that works
Not everyone can build an application that is "maintainable" (easy to change)

Maintaining
    Bug Fixes
    Adding New Features (Extensibility)
    Removing Dead Features

class PastClass{

}

Class PresentClass{
    private PastClass _pastClass;
    public PresentClass(){
        _pastClass = new PastClass();
    }
    public void DoSomething(){
        _pastClass.DoSomething();
    }
}


class FutureClass{

}

No tight coupling

OO Design Principles
    Open Closed Principle
    Dependency Inversion Principle
    Single Responsibility Principle

Write a simple console program that will do the following
    1. Accept the userName from the user
    2. Print a personalized greeting message
        if hour of the day < 12
            "Hi Magesh, Good Morning!"
        else
            "Hi Magesh, Good Afternoon!"

Code Smells
    1. new
    2. static classes & static methods
    3. if then & switch case

Instead of small number of large classes, better to have large number of small classes


Commanility Variability
    Keep what is common together
    Move out what is varying

Homework:
    Create a Filter method in the Products using which the user should be able to filter the products by any criteria. For ex:
        filter costly products (cost > 1000)
        filter stationary products (category = "Stationary")
        filter affordable products (!costly products)
        filter costly stationary products
        etc

India
    Discount (10)
    ShippingCost (100)

US
    Discount(5)
    ShippingCost(50)


Construction
    Bike
        State
        Behavior
            Start()
            Ride()
            ApplyBreak()
            Accelerate()
            Stop()
        Static methods
            .Create()
            .AddEngine()
            .AddBreakSystem()


    public class Employee{
        public Employee(){
            //construction logic
        }
    }


    Agile Princiles Patterns and Practices - Robert. C. Martin
    Refactoring - Martin Fowler
    Refactoring Patterns
    Head First Design Patterns
    Growing Object Oriented Software Guided By Tests

Creational Patterns
    FactoryMethod, Abstract Factory - Which?
    Builder, Prototype - How?
    Singleton - Lifetime

Structural Patterns
    Relations between the objects and classes

    Adapter
        To convert the interface of a class into another interface the client expects.
        Adapter lets classes work togehter that couldn't otherwise because of incompatible interfaces.

    Bridge
        To separate the interface of a class from its implementation.
        Bridge lets the two parts of a class vary independently.

    Decorator
        To add new functionality to an existing class without modifying its structure.
        Decorator lets you add new functionality to an existing class without altering its structure.

    Composite
        To create a tree structure of objects.
        Composite lets you compose objects into tree structures and then work with the tree as a whole.

    Facade
        To provide a simplified interface to a large number of classes.
        Facade lets you access a set of interfaces in a simpler way.

public class CityFromExternalSystem{

}

public class City {
    public City(CityFromExternalSystem cityFromExternalSystem){
        //converting the external system city to our city
    }
}

public class Employee{
    public int Id;
    public string Name;
    public string City;

    public Employee(int id){
        Id = id;
    }

}

var emp = new Employee(100) { Name = "", City ="" }

emp.Id = 100
emp.Name = "magesh"
emp.City = "Bengaluru"


Employee table
Id  Name    City
100 Magesh  Bengaluru
    Suresh  Pune


Writer
    FileWriter
    NetworkWriter
    DBWriter

Logger

var logger = new Logger()

logger.Writer = new FileWriter()


invocation started
add result = 300
invocation completed

invocation started
subtract result = -100
invocation completed

class Calculator{
    public void Add(int a, int b){
        Console.WriteLine(a + b);
    }

    public void Subtract(int a, int b){
        Console.WriteLine(a - b);
    }
}

class LogCalculator {
    public LogCalculator(Calculator calculator){
        _calculator = calculator;
    }
    public void Add(int a, int b){
        Console.WriteLine("invocation started");
        _calculator.Add(a, b);
        Console.WriteLine("invocation completed");
    }

    public void Subtract(int a, int b){
        Console.WriteLine("invocation started");
        _calculator.Subtract(a, b);
        Console.WriteLine("invocation completed");
    }
}


function logOperation(operation){
    return function(x,y){
        console.log('Invocation started @ ', Date());
        operation(x,y)
        console.log('Invocation completed @ ', Date());
    }
}

function add(x,y){
    result = x + y
    console.log('add result = ', result)
}

function subtract(x,y){
    result = x - y
    console.log('subtract result = ', result);
}


//TypeScript
class logDecorator{

}

@logDecorator()
function add(x,y){
    result = x + y
    console.log('add result = ', result)
}

@logDecorator()
function subtract(x,y){
    result = x - y
    console.log('subtract result = ', result);
}
